{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOKL+dFUmJu8u7ptvzISs/2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install gym[box2d]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"reaUBXAAuUBg","executionInfo":{"status":"ok","timestamp":1682590262039,"user_tz":-330,"elapsed":74056,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"56055de8-0cba-4b06-9c3c-7000438b9acf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gym[box2d] in /usr/local/lib/python3.9/dist-packages (0.25.2)\n","Requirement already satisfied: gym-notices>=0.0.4 in /usr/local/lib/python3.9/dist-packages (from gym[box2d]) (0.0.8)\n","Requirement already satisfied: importlib-metadata>=4.8.0 in /usr/local/lib/python3.9/dist-packages (from gym[box2d]) (6.6.0)\n","Requirement already satisfied: numpy>=1.18.0 in /usr/local/lib/python3.9/dist-packages (from gym[box2d]) (1.22.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.9/dist-packages (from gym[box2d]) (2.2.1)\n","Collecting swig==4.*\n","  Downloading swig-4.1.1-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m22.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting box2d-py==2.3.5\n","  Downloading box2d-py-2.3.5.tar.gz (374 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m374.4/374.4 kB\u001b[0m \u001b[31m28.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting pygame==2.1.0\n","  Downloading pygame-2.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m48.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.9/dist-packages (from importlib-metadata>=4.8.0->gym[box2d]) (3.15.0)\n","Building wheels for collected packages: box2d-py\n","  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n","  \n","  \u001b[31m×\u001b[0m \u001b[32mpython setup.py bdist_wheel\u001b[0m did not run successfully.\n","  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n","  \u001b[31m╰─>\u001b[0m See above for output.\n","  \n","  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n","  Building wheel for box2d-py (setup.py) ... \u001b[?25lerror\n","\u001b[31m  ERROR: Failed building wheel for box2d-py\u001b[0m\u001b[31m\n","\u001b[0m\u001b[?25h  Running setup.py clean for box2d-py\n","Failed to build box2d-py\n","Installing collected packages: swig, box2d-py, pygame\n","  Running setup.py install for box2d-py ... \u001b[?25l\u001b[?25hdone\n","\u001b[33m  DEPRECATION: box2d-py was installed using the legacy 'setup.py install' method, because a wheel could not be built for it. pip 23.1 will enforce this behaviour change. A possible replacement is to fix the wheel build issue reported above. Discussion can be found at https://github.com/pypa/pip/issues/8368\u001b[0m\u001b[33m\n","\u001b[0m  Attempting uninstall: pygame\n","    Found existing installation: pygame 2.3.0\n","    Uninstalling pygame-2.3.0:\n","      Successfully uninstalled pygame-2.3.0\n","Successfully installed box2d-py-2.3.5 pygame-2.1.0 swig-4.1.1\n"]}]},{"cell_type":"code","source":["import gym\n","env = gym.make(\"LunarLander-v2\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tA6uzbZGuYY-","executionInfo":{"status":"ok","timestamp":1682590270345,"user_tz":-330,"elapsed":646,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"cf7fe11b-8792-4177-aa23-e041184a3f8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/gym/core.py:317: DeprecationWarning: \u001b[33mWARN: Initializing wrapper in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n","  deprecation(\n","/usr/local/lib/python3.9/dist-packages/gym/wrappers/step_api_compatibility.py:39: DeprecationWarning: \u001b[33mWARN: Initializing environment in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n","  deprecation(\n"]}]},{"cell_type":"code","source":["env.observation_space.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m-4CjZzDuqfS","executionInfo":{"status":"ok","timestamp":1682590290178,"user_tz":-330,"elapsed":7,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"fecf9af0-8ac7-4eb5-9ed3-edb5fcfefade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["(8,)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["ll = nn.Linear(8,4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q2-bRo0nMlmi","executionInfo":{"status":"ok","timestamp":1682590315088,"user_tz":-330,"elapsed":40,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"a63ea2d4-e0f6-49f0-c2b6-30c069d4f9df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["m = ll(torch.tensor(env.reset())).detach()"],"metadata":{"id":"MUA6-n3LMqlg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["env.step(m.argmax(0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WHS0IdjhM2K9","executionInfo":{"status":"ok","timestamp":1682590477764,"user_tz":-330,"elapsed":7,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"4f1e50bd-38ad-4375-f517-e09608e792da"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 0.02940931,  1.4083595 ,  0.591526  , -0.07638396, -0.0313139 ,\n","        -0.11267557,  0.        ,  0.        ], dtype=float32),\n"," 0.04005720725035758,\n"," False,\n"," {})"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["env.step(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"alY4ku2xMypR","executionInfo":{"status":"error","timestamp":1682590457527,"user_tz":-330,"elapsed":383,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"72c5aa41-cde3-4823-f7e7-f920fb7b3518"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-0597a87118df>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/gym/wrappers/time_limit.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, action)\u001b[0m\n\u001b[1;32m     58\u001b[0m         \"\"\"\n\u001b[1;32m     59\u001b[0m         observation, reward, terminated, truncated, info = step_api_compatibility(\n\u001b[0;32m---> 60\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m             \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/gym/wrappers/order_enforcing.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, action)\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_reset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mResetNeeded\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot call env.step() before calling env.reset()\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/gym/wrappers/step_api_compatibility.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, action)\u001b[0m\n\u001b[1;32m     50\u001b[0m             \u001b[0;34m(\u001b[0m\u001b[0mobservation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreward\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mterminated\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mobservation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreward\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m         \"\"\"\n\u001b[0;32m---> 52\u001b[0;31m         \u001b[0mstep_returns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_step_api\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mstep_to_new_api\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_returns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/gym/wrappers/env_checker.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, action)\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0menv_step_passive_checker\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/gym/envs/box2d/lunar_lander.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, action)\u001b[0m\n\u001b[1;32m    479\u001b[0m             \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    480\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 481\u001b[0;31m             assert self.action_space.contains(\n\u001b[0m\u001b[1;32m    482\u001b[0m                 \u001b[0maction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    483\u001b[0m             ), f\"{action!r} ({type(action)}) invalid \"\n","\u001b[0;31mAssertionError\u001b[0m: 4 (<class 'int'>) invalid "]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SpNGQWbIHz24"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as f\n","import torch.optim as optim\n","\n","import numpy as np\n","import random\n","import copy \n","import time\n","import gym\n","import matplotlib.pyplot as plt\n","\n","from collections import deque"]},{"cell_type":"code","source":["print(np.__version__)\n","print(gym.__version__)\n","print(torch.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MKex3ug7vf0c","executionInfo":{"status":"ok","timestamp":1682532377925,"user_tz":-330,"elapsed":7,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"outputId":"3b6355fd-d5ce-459a-bf50-f096108e1320"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.22.4\n","0.25.2\n","2.0.0+cu118\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["class Replay:\n","  def __init__(self,maxlen,batch_size):\n","    self.maxlen      = maxlen\n","    self.batch_size  = batch_size\n","    self.states      = deque(maxlen = self.maxlen)\n","    self.next_states = deque(maxlen = self.maxlen)\n","    self.terminal    = deque(maxlen = self.maxlen)\n","    self.protires    = deque(maxlen = self.maxlen)\n","    self.rewards     = deque(maxlen = self.maxlen)\n","  def add(self,state,next_state,done,reward):\n","    self.states.append(state)\n","    self.next_states.append(next_state)\n","    self.terminal.append(done)\n","    self.rewards.append(reward)\n","  def sample(self):\n","    states      = deque(maxlen = self.batch_size)\n","    next_states = deque(maxlen = self.batch_size)\n","    terminal = deque(maxlen = self.batch_size)\n","    reward   = deque(maxlen = self.batch_size)\n","    protires = deque(maxlen = self.batch_size)\n","    temp = list(self.protires)\n","    index = []\n","    for k in range(self.batch_size):\n","      value = max(temp)\n","      idx = temp.index(value)\n","      index.append(idx)\n","      del(temp[idx])\n","    for i in range(self.batch_size):\n","      states.append(self.states[index[i]])\n","      next_states.append(self.next_states[index[i]])\n","      terminal.append(self.terminal[index[i]])\n","      reward.append(self.rewards[index[i]])\n","      protires.append(self.protires[index[i]])\n","    return states,next_states,terminal,reward,protires\n","  def protires_update(self,protires):\n","    self.protires.append(protires)"],"metadata":{"id":"qeZfOwJOIN_w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Model(nn.Module):\n","  def __init__(self,state_size,action_size):\n","    super(Model,self).__init__()\n","    self.state_size = state_size\n","    self.action_size = action_size\n","    self.linear1     = nn.Linear(self.state_size,256)\n","    self.linear2     = nn.Linear(256,128)\n","    self.linear3     = nn.Linear(128,self.action_size)\n","  def forward(self,input):\n","    x = f.relu(self.linear1(input))\n","    x = f.relu(self.linear2(x))\n","    x = f.relu(self.linear3(x))\n","    return x"],"metadata":{"id":"jd5IaGKlQUFW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.autograd.set_detect_anomaly(True)\n","class DQN:\n","  def __init__(self,state_size,action_size,replay,gamma,lamda,batch_size):\n","    self.replay = replay\n","    self.gamma  = gamma\n","    self.lamda  = lamda\n","    self.batch_size = batch_size\n","    self.episilon = 0.7\n","    self.decay    = 0.00001\n","    self.lr       = 0.0005\n","    self.e        = 0.009\n","    self.episodes = 10000\n","    self.steps    = 300\n","    self.state_size = state_size\n","    self.action_size= action_size\n","    self.device     = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    self.model      = Model(self.state_size,self.action_size).to(self.device)\n","    self.optim      = optim.Adam(self.model.parameters() ,lr = self.lr)\n","    self.loss       = []\n","    self.episode    = []\n","    self.reward     = []\n","  def choose_action(self,state):\n","    state = torch.tensor(state,dtype = torch.float)\n","    rand  = random.uniform(0,1)\n","    if rand< self.episilon:\n","      value = self.model(state)\n","      action = value.argmax(0).item()\n","    else:\n","      action   = env.action_space.sample()\n","    return action\n","  def learn(self,state,next_state,done,reward):\n","    if len(self.replay.states) <= self.batch_size:\n","      rand = random.uniform(0.007,0.997)\n","      self.replay.protires_update(rand)\n","      self.loss.append(0)\n","      return \n","    else:\n","      states,next_states,terminals,rewards,protiores = self.replay.sample()\n","      values  = []\n","      for i in range(self.batch_size):\n","        value = self.model(torch.tensor(states[i],dtype = torch.float))\n","        values.append(value)\n","      y_target = 0\n","      for i in range(self.batch_size):\n","        if terminals[i] ==True:\n","          y_target+= rewards[i]\n","        else:\n","          y_target += rewards[i] + self.gamma*max(values[i])\n","      value = self.model(torch.tensor(state,dtype = torch.float).to(self.device))\n","      loss = (y_target-max(value))**2\n","      protireti = loss + self.e\n","      protireti += protireti/sum(protiores)\n","      self.replay.protires_update(protireti)\n","      weight = torch.exp(1/(self.batch_size*protireti))\n","      loss = max(weight*value*loss)\n","      self.loss.append(loss.item())\n","      loss = torch.tensor(loss.item())\n","      torch.save(self.model.state_dict(),\"the_model.pth\")\n","      loss.requires_grad = True\n","      self.optim.zero_grad()\n","      loss.backward()\n","      self.optim.step()\n","  def ploting(self):\n","    plt.plot(self.episode,self.loss)\n","    plt.xlabel(\"episodes\")\n","    plt.ylabel(\"loss\")\n","    plt.savefig(\"protirized_replay_dqn_loss.png\")\n","    plt.close()\n","    plt.plot(self.episode,self.reward)\n","    plt.xlabel(\"rewards\")\n","    plt.ylabel(\"loss\")\n","    plt.savefig(\"protirized_replay_dqn_reward.png\")\n","    plt.close()\n","  def play(self):\n","    count = 0\n","    for i in range(self.episodes):\n","      state = env.reset()\n","      for step in range(self.steps):\n","        a_t = time.time()\n","        action = self.choose_action(state)\n","        next_state,reward,done,info = env.step(action)\n","        self.replay.add(state,next_state,done,reward)\n","        self.episode.append(count)\n","        self.reward.append(reward)\n","        if done:\n","          self.learn(state,next_state,done,reward)\n","          state= next_state\n","          b_t = time.time()\n","          print(f'episode : {count} , reward : {reward} , time : {-1*(a_t-b_t)}')\n","          self.ploting()\n","          count+=1\n","        else:\n","          self.learn(state,next_state,done,reward)\n","          state= next_state\n","          b_t = time.time()\n","          print(f'episode : {count} , reward : {reward} , time : {-1*(a_t-b_t)}')\n","          self.ploting()\n","          count +=1"],"metadata":{"id":"v518i8AhLpI-","executionInfo":{"status":"ok","timestamp":1682590754254,"user_tz":-330,"elapsed":590,"user":{"displayName":"vishnu vardhan","userId":"07969204109325658924"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c30fb5ae-c577-4c36-8e10-7797103aa42e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["replay = Replay(100000,32)\n","model = DQN(8,4,replay,0.99,0.95,32)\n","model.play()"],"metadata":{"id":"SDkLc0WGXV_z"},"execution_count":null,"outputs":[]}]}